@page "/todolist"
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _toDoService
@inject ISnackbar SnackbarService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<MudPopoverProvider />
<MudSnackbarProvider />

<div class="container">
    @if(isLoading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Text" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Text" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Text" Height="40px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="800px" Height="410px" />
    }
    else if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
    {
        <p>Sorry, there are no @taskViewState tasks</p>
        @if (taskViewState == "active")
        {
            <div class="mb-3 d-flex">
                <h5 class="me-2 mt-2">View: </h5>
                <MudButton OnClick="SetTasksToCompleted" Variant="Variant.Filled" Color="Color.Dark" class="me-3">Completed Tasks</MudButton>
                <MudButton OnClick="SetTasksToAll" Variant="Variant.Filled" Color="Color.Dark">All Tasks</MudButton>
            </div>
            <div class="mb-3">
                <MudButton Href="todolist/create" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create</MudButton>
            </div>
        }
    }
    else
    {
        <div class="home-page">
            <div class="row">
                <div class="col-md-7 col-sm-6">
                    <h3>@Header: @_toDoService.ToDos.Count</h3>
                    @* <p>taskViewState</p> *@
                </div>
                <div class="col-md-5 col-sm-6" >
                    @if (taskViewState == "active")
                    {
                        <div class="mb-3 d-flex">
                            <h5 class="me-2 mt-2">View: </h5>
                            <MudButton OnClick="SetTasksToCompleted" Variant="Variant.Filled" Color="Color.Dark" class="me-3">Completed Tasks</MudButton>
                            <MudButton OnClick="SetTasksToAll" Variant="Variant.Filled" Color="Color.Dark">All Tasks</MudButton>
                        </div>
                    }
                    else if (taskViewState == "completed")
                    {
                        <div class="mb-3 d-flex">
                            <h5 class="me-2 mt-2">View: </h5>
                            <MudButton OnClick="SetTasksToActive" Variant="Variant.Filled" Color="Color.Dark" class="me-3">Active Tasks</MudButton>
                            <MudButton OnClick="SetTasksToAll" Variant="Variant.Filled" Color="Color.Dark">All Tasks</MudButton>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3 d-flex">
                            <h5 class="me-2 mt-2">View: </h5>
                            <MudButton OnClick="SetTasksToActive" Variant="Variant.Filled" Color="Color.Dark" class="me-3">Active Tasks</MudButton>
                            <MudButton OnClick="SetTasksToCompleted" Variant="Variant.Filled" Color="Color.Dark">Completed Tasks</MudButton>
                        </div>
                    }
                </div>
            </div>

            <div class="mb-3">
                <MudButton Href="todolist/create" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create</MudButton>
                @if(taskViewState == "completed")
                {
                    <MudButton @onclick="() => DeleteAll()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" class="ms-2">Delete all</MudButton>
                }
            </div>
            <MudDataGrid T="TodoItem" Items="_toDoService.ToDos" SelectOnRowClick="true"
            EditMode="DataGridEditMode.Form" Bordered="true" Elevation="15"
            EditTrigger="DataGridEditTrigger.OnRowClick">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <TemplateColumn Items="todoitem" title="Completed">
                        <CellTemplate>
                            <MudCheckBox @bind-Value="@context.Item.IsComplete" @onclick="() => ChangeCompleteness(context.Item)" id="liveToastBtn"></MudCheckBox>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Items="todoitem">
                        <CellTemplate>
                            @* OnClick="(() => Edit(context.Item.ID))" *@

                            <a href="@($"todoitem/details/{context.Item.Id}")">
                                <i class="fa-solid fa-circle-info fa-xl"></i>
                            </a>
                            <a href="@($"todoitem/update/{context.Item.Id}")" class="" >
                                <i class="fa-solid fa-pen-to-square fa-xl"></i>
                            </a>
                            <button @onclick="() => PassIdToModal(context.Item.Id)" type="button" class="" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <i class="fa-solid fa-trash fa-xl"></i>
                            </button>

                            @* <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Primary" aria-label="delete" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" aria-label="delete" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" /> *@

                            @* I WANT TO USE THIS ONE... *@
                            @* <a href="@($"todoitem/details/{context.Item.Id}")"><i class="fa-solid fa-circle-info fa-xl"></i></a>
                            <a href="@($"todoitem/update/{context.Item.Id}")"><i class="fa-solid fa-pen-to-square fa-xl"></i></a> *@
                            @* <a @onclick="() => DeleteTodoItem(context.Item.Id)" href="@($"todoitem/delete/{context.Item.Id}")"><i class="fa-solid fa-trash fa-xl"></i></a> *@

                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Details"
                            OnClick="() => GoToDeletePage(3)" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" /> *@

                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Are you sure you want to delete?</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @* <div class="modal-body">
                ...
            </div> *@
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button @onclick="() => DeleteTodoItem(idForDelete)" type="button" class="btn btn-danger" data-bs-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Checkbox TOAST -->
@* <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <img src="..." class="rounded me-2" alt="...">
            <strong class="me-auto">Bootstrap</strong>
            <small>11 mins ago</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Hello, world! This is a toast message.
        </div>
    </div>
</div> *@

@code {
    public List<TodoItem> ToDoListTrad = new List<TodoItem>();
    public string taskViewState = "active";
    public bool activeTasks = true;
    public string Header = "Active Tasks";
    public bool isLoading = true;
    public int idForDelete = 0;

    // protected override async Task OnInitializedAsync()
    // {        
    //     _toDoService.ToDosChanged += StateHasChanged;
    //     _toDoService.ToDos = await _toDoService.GetActiveTodos();
    //     LoadState();
    //     isLoading = false;
    // }

    protected override async Task OnParametersSetAsync()
    {
        _toDoService.ToDosChanged += StateHasChanged;
        _toDoService.ToDos = await _toDoService.GetActiveTodos();
        LoadState();
        isLoading = false;
    }

    private async void LoadState()
    {
        if(taskViewState == "completed")
        {
            // _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == true).ToList();
            _toDoService.ToDos = await _toDoService.GetCompletedTodos();
        }
        else if (taskViewState == "active")
        {
            // _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == false).ToList();
            _toDoService.ToDos = await _toDoService.GetActiveTodos();
        }
        else 
        {
            _toDoService.ToDos = await _toDoService.GetAllToDos();
        }
        StateHasChanged();
    }


    private void SetTasksToCompleted()
    {
        taskViewState = "completed";
        Header = "Completed Tasks";
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
    }

    private void SetTasksToAll()
    {
        taskViewState = "all";
        Header = "All Tasks";
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
    }

    private void SetTasksToActive()
    {
        taskViewState = "active";
        Header = "Active Tasks";
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
    }

    private async Task ChangeCompleteness(TodoItem itemToUpdate)
    {
        itemToUpdate.IsComplete = !itemToUpdate.IsComplete;
        await _toDoService.UpdateTodoItem(itemToUpdate);
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
        if(taskViewState == "active"){
            SnackbarService.Add($"Task is marked completed", Severity.Success);
        }
        else
        {
            SnackbarService.Add($"Task is marked as active", Severity.Success);
        }
    }

    private async void PassIdToModal(int id)
    {
        idForDelete = id;
    }

    // private async Task DeleteTodoItem(int id)
    private async Task DeleteTodoItem(int idForDelete)
    {
        await _toDoService.DeleteTodo(idForDelete);
        SnackbarService.Add($"Deleted task #{idForDelete}", Severity.Error);
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
        NavigationManager.NavigateTo("/");
    }

    private async Task DeleteAll()
    {
        await _toDoService.DeleteAllCompleted();
        LoadState();
        _toDoService.ToDosChanged += StateHasChanged;
    }

    private void GoToDeletePage(int id){
        NavigationManager.NavigateTo($"todoitem/delete/{id}");
    }


}
