@page "/todolist"
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _toDoService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<MudPopoverProvider />


<div class="container">
@if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <div class="home-page">
        @if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
        {
            <p>not wired up brah</p>
        }
        else 
        {
            <div class="row">
                <div class="col-md-10">
                    <h3>ToDoList</h3>
                </div>
                <div class="col-md-2">
                    <div class="mb-3">
                        <MudButton Href="todolist/create" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create</MudButton>
                    </div>
                </div>
            </div>

            
            <MudDataGrid T="TodoItem" Items="_toDoService.ToDos" SelectOnRowClick="true"
                    EditMode="DataGridEditMode.Form" Bordered="true"
                    EditTrigger="DataGridEditTrigger.OnRowClick">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <TemplateColumn Items="todoitem" title="Completed">
                        <CellTemplate>
                            <MudCheckBox @bind-Value="@context.Item.IsComplete"></MudCheckBox>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Items="todoitem">
                        <CellTemplate>
                            @* OnClick="(() => Edit(context.Item.ID))" *@
                            <a href="@($"todoitem/details/{context.Item.Id}")"><i class="fa-solid fa-circle-info fa-xl"></i></a>
                            <a href="@($"todoitem/update/{context.Item.Id}")"><i class="fa-solid fa-pen-to-square fa-xl"></i></a>
                            <a href="@($"todoitem/delete/{context.Item.Id}")"><i class="fa-solid fa-trash fa-xl"></i></a>

                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Details"
                            OnClick="() => GoToDeletePage(3)" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" /> *@

                        </CellTemplate>

                    </TemplateColumn>
                    
                </Columns>
            </MudDataGrid>
        }

    </div>
}
</div>

@code {
    // public int Id = 3;

    public List<TodoItem> ToDoListTrad = new List<TodoItem>();
    public bool isCompleted = true;

    protected override async Task OnInitializedAsync()
    {
        _toDoService.ToDosChanged += StateHasChanged;
        await _toDoService.GetAllToDos();
    }

    private async Task DeleteTodoItem(int id)
    {
        await _toDoService.DeleteTodo(id);
    }

    private void GoToDeletePage(int id){
        NavigationManager.NavigateTo($"todoitem/delete/{id}");
    }
}
