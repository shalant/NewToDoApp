@page "/todolist"
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _toDoService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<MudPopoverProvider />


<div class="container">
    @if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="home-page">
            @if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
            {
                <p>not wired up brah</p>
            }
            else 
            {
                <div class="row">
                    <div class="col-md-7">
                        <h3>@Header</h3>
                    </div>
                    <div class="col-md-5">
                        @if (taskViewState == "active")
                        {
                            <div class="mb-3 d-flex">
                                <MudButton OnClick="SetTasksToCompleted" Variant="Variant.Filled" Color="Color.Dark" class="me-3">View Completed Tasks</MudButton>
                                <MudButton OnClick="SetTasksToAll" Variant="Variant.Filled" Color="Color.Dark">View All Tasks</MudButton>
                            </div>
                        }
                        else if (taskViewState == "completed")
                        {
                            <div class="mb-3 d-flex">
                                <MudButton OnClick="SetTasksToActive" Variant="Variant.Filled" Color="Color.Dark" class="me-3">View Active Tasks</MudButton>
                                <MudButton OnClick="SetTasksToAll" Variant="Variant.Filled" Color="Color.Dark">View All Tasks</MudButton>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3 d-flex">
                                <MudButton OnClick="SetTasksToActive" Variant="Variant.Filled" Color="Color.Dark" class="me-3">View Active Tasks</MudButton>
                                <MudButton OnClick="SetTasksToCompleted" Variant="Variant.Filled" Color="Color.Dark">View Completed Tasks</MudButton>
                            </div>
                        }
                    </div>
                </div>

                <div class="mb-3">
                    <MudButton Href="todolist/create" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create</MudButton>
                </div>
                @* <MudDataGrid T="TodoItem" Items="ToDoListTrad" SelectOnRowClick="true" *@
                <MudDataGrid T="TodoItem" Items="_toDoService.ToDos" SelectOnRowClick="true"
                EditMode="DataGridEditMode.Form" Bordered="true"
                EditTrigger="DataGridEditTrigger.OnRowClick">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="Id" />
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <TemplateColumn Items="todoitem" title="Completed">
                            <CellTemplate>
                                <MudCheckBox @bind-Value="@context.Item.IsComplete"></MudCheckBox>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Items="todoitem">
                            <CellTemplate>
                                @* OnClick="(() => Edit(context.Item.ID))" *@
                                <a href="@($"todoitem/details/{context.Item.Id}")"><i class="fa-solid fa-circle-info fa-xl"></i></a>
                                <a href="@($"todoitem/update/{context.Item.Id}")"><i class="fa-solid fa-pen-to-square fa-xl"></i></a>
                                <a href="@($"todoitem/delete/{context.Item.Id}")"><i class="fa-solid fa-trash fa-xl"></i></a>

                                @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                                @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Details"
                            OnClick="() => GoToDeletePage(3)" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" /> *@

                            </CellTemplate>

                        </TemplateColumn>

                    </Columns>
                </MudDataGrid>
            }

        </div>
    }
</div>

@code {
    public List<TodoItem> ToDoListTrad = new List<TodoItem>();
    public string taskViewState = "active";
    public bool activeTasks = true;
    public string Header = "Active Tasks";

    protected override async Task OnInitializedAsync()
    {
        _toDoService.ToDosChanged += StateHasChanged;
        await _toDoService.GetActiveTodos();
        LoadState();
    }

    protected override async Task OnParametersSetAsync()
    {
        _toDoService.ToDosChanged += StateHasChanged;
        // await _toDoService.GetAllToDos();
        // ToDoListTrad = _toDoService.ToDos.Where(x => x.IsComplete == false).ToList();
        // if (taskViewState == "active")
        // {
        //     _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == false).ToList();
        // }
        // else if (taskViewState == "completed")
        // {
        //     _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == true).ToList();
        // }
        // else
        // {
        //     _toDoService.ToDos = _toDoService.ToDos.ToList();
        // }
    }

    private void LoadState()
    {
        if(taskViewState == "completed")
        {
            _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == true).ToList();
        }
        else if (taskViewState == "active")
        {
            _toDoService.ToDos = _toDoService.ToDos.Where(x => x.IsComplete == false).ToList();
        }
        else 
        {
            _toDoService.ToDos = _toDoService.ToDos;
        }
    }


    private void SetTasksToCompleted()
    {
        taskViewState = "completed";
        Header = "All Completed Tasks";
        LoadState();
    }
    
    private void SetTasksToAll()
    {
        taskViewState = "all";
        Header = "All Tasks";
        LoadState();
    }
    
    private void SetTasksToActive()
    {
        taskViewState = "active";
        Header = "All Active Tasks";
        LoadState();
    }

    private async Task DeleteTodoItem(int id)
    {
        await _toDoService.DeleteTodo(id);
    }

    private void GoToDeletePage(int id){
        NavigationManager.NavigateTo($"todoitem/delete/{id}");
    }
}
