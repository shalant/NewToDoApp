@page "/todolist"
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _toDoService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<MudPopoverProvider />

<h3>ToDoList</h3>

@if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <div>
        @if (_toDoService.ToDos == null || _toDoService.ToDos.Count == 0)
        {
            <p>not wired up brah</p>
        }
        else 
        {
            @* @foreach (var ToDo in ToDoService.ToDos)
            {
                <p>@ToDo.Name</p>
            } *@
            <MudButton Href="todolist/create">Create New</MudButton>
            <MudDataGrid T="TodoItem" Items="_toDoService.ToDos" SelectOnRowClick="true"
                         EditMode="DataGridEditMode.Form" Bordered="true"
                EditTrigger="DataGridEditTrigger.OnRowClick">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <TemplateColumn Items="todoitem">
                        <CellTemplate>
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" /> *@
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Details" 
                                
                            />
                            @* @OnClick="GoToDeletePage(id)" *@
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" />

                        </CellTemplate>

                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }

    </div>
}

@code {
    public List<TodoItem> ToDoListTrad = new List<TodoItem>();

    protected override async Task OnInitializedAsync()
    {
        _toDoService.ToDosChanged += StateHasChanged;
        await _toDoService.GetAllToDos();
    }

    private async Task DeleteTodoItem(int id)
    {
        await _toDoService.DeleteTodo(id);
    }

    private void GoToDeletePage(int id){
        NavigationManager.NavigateTo("$todolist/delete/{id}");
    }
}
