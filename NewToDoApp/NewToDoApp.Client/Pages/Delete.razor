@page "/delete"
@page "/todoitem/delete"
@page "/todoitem/delete/{id:int}"
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _todoService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<PageTitle>Delete</PageTitle>

<h3>Delete</h3>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ToDoItem</h2>
    <hr />
    @if (todoitem == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@todoitem.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsComplete</dt>
            <dd class="col-sm-10">@todoitem.IsComplete</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Secret</dt>
            <dd class="col-sm-10">@todoitem.Secret</dd>
        </dl>
        <EditForm method="post" Model="todoitem" OnValidSubmit="DeleteToDoItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(todoitem is null)">Delete</button> |
            <a href="/todoitems">Back to List</a>
        </EditForm>
    }
    else


</div>

@code {
    private TodoItem? todoitem;
    public bool _isLoading = false;

    // [SupplyParameterFromQuery]
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // _isLoading = true;
        // using var context = DbFactory.CreateDbContext();
        var todoitem = await _todoService.GetTodoItemById(Id);
        _isLoading = false;
        if (todoitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteToDoItem()
    {
        await _todoService.DeleteTodo(Id);

    }
}
