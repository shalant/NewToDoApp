@page "/todoitem/update/{id:int}"
@using Microsoft.EntityFrameworkCore
@using NewToDoApp.Models
@inject NavigationManager NavigationManager
@inject IToDoService _toDoService
@inject ISnackbar SnackbarService
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<MudSnackbarProvider />

<h3>Update</h3>

@if (todoitem == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="todoitem" OnValidSubmit="() => UpdateToDoItem(todoitem)">
    @* <EditForm Model="TodoItem" OnValidSubmit="() => UpdateToDoItem(todoitem)"> *@
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" @bind-Value="todoitem.Name" class="form-control" />
            <ValidationMessage For="() => todoitem.Name" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="iscomplete" class="form-label">IsComplete:</label>
            <InputCheckbox id="iscomplete" @bind-Value="todoitem.IsComplete" class="form-check-input" />
            <ValidationMessage For="() => todoitem.IsComplete" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="shortDescription" class="form-label">Short Description:</label>
            <InputText id="shortDescription" @bind-Value="todoitem.ShortDescription" class="form-control" />
            <ValidationMessage For="() => todoitem.ShortDescription" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}
<div>
    <a href="/todoitems">Back to List</a>
</div>

@code {
    private TodoItem todoitem { get; set; } = null;
    public bool _isLoading = false;
    private string message = string.Empty;

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private TodoItem TodoItem { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        var result = await _toDoService.GetTodoItemById(Id);
        _isLoading = false;
        // todoitem = result.Data;

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            todoitem = result.Data;
        }
    }

    private async Task UpdateToDoItem(TodoItem todoItem)
    {
        await _toDoService.UpdateTodoItem(todoitem);
        SnackbarService.Add($"Updated task #{todoitem.Id}", Severity.Success);
        NavigationManager.NavigateTo("/");
    }
}
