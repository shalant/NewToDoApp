@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JS

@* <MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" /> *@
<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="@_theme" />

@* <MudPopoverProvider /> *@
@* <MudDialogProvider /> *@
<MudSnackbarProvider />


<MudLayout>
    <div class="@GetCssClass()">


    <MudAppBar Elevation="1" >
        @* <MudText Typo="Typo.h5" Class="ml-3">Application</MudText> *@
        <a href="/">
            <img src="images/ScoutLogo-Black.jpg" alt="Logo" class="scout-logo" />
        </a>
        @*         <MudSwitch @bind-Value="_isDarkMode" />*@
        @* <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" /> *@
        @* <MudSwitch @bind="ToggleDarkMode()"  Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" /> *@
        @* @if (selectedTheme == "" | selectedTheme == "Light")
        {
            <i class="fa-solid fa-moon fa-2x" @onclick="() => ChangeTheme()"></i>
        }
        else
        {
            <i class="fa-solid fa-sun fa-2x" @onclick="() => ChangeTheme()"></i>
        } *@
        <MudSpacer />
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle user-button" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-user"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#">Settings</a></li>
                    <li><a class="dropdown-item" href="#">Admin</a></li>
                    <li><a class="dropdown-item" href="#">Logout</a></li>
                </ul>
            </div>
        @* <div class="dropdown me-3 hide-tablet">
            <button class="btn-primary btn-secondary user-button" @onclick="ToggleUserMenu"
                    @onfocusout="HideUserMenu" >
            <i class="fa-solid fa-user"></i>
            </button>
        </div>
        <div class="dropdown-menu dropdown-menu-left">
                    <a href="profile" class="dropdown-item">Profile</a>
                    <a href="orders" class="dropdown-item">Orders</a>
                    <hr />
                    <button class="dropdown-item" >Logout</button>
        </div>       *@  
    </MudAppBar>
    @* <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer> *@
    @* <MudMainContent Class="mt-16 pa-4"> *@
    <MudMainContent Class="mt-16">
        @Body
    </MudMainContent>
    </div>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    // private bool _isDarkMode = true;
    private bool _isDarkMode;
    private MudTheme? _theme = null;
    private string selectedTheme;
    private readonly string keyTheme = "theme";
    private bool showUserMenu = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        // var themeFromLocalStorage = await JS.InvokeAsync<string>("readLocalStorage", keyTheme);

        // if (!string.IsNullOrEmpty(themeFromLocalStorage))
        // {
        //     selectedTheme = themeFromLocalStorage;
        // }
    }

    protected async Task OnAfterRenderAsync()
    {
        var themeFromLocalStorage = await JS.InvokeAsync<string>("readLocalStorage", keyTheme);
        if (!string.IsNullOrEmpty(themeFromLocalStorage))
        {
            selectedTheme = themeFromLocalStorage;
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            Primary = "#00a6ec"
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private string GetCssClass()
    {
        // var themeFromLocalStorage = await LocalStorage.GetItemAsStringAsync("theme");
        // selectedTheme = themeFromLocalStorage;
        if(selectedTheme == "Light" | selectedTheme == null | selectedTheme == "")
        // if (themeFromLocalStorage == "Light" | themeFromLocalStorage == null | themeFromLocalStorage == "null")
        {
            return string.Empty;
        }
        else
        {
            return "dark-mode";
        }
    }

    private async Task ChangeTheme()
    {
        if (selectedTheme == "Light" | selectedTheme == null | selectedTheme == "null")
        {
            selectedTheme = "Dark";
            await JS.InvokeVoidAsync("addToLocalStorage", keyTheme, selectedTheme);
        }
        else
        {
            selectedTheme = "Light";
            await JS.InvokeVoidAsync("addToLocalStorage", keyTheme, selectedTheme);

        }
        

    }
}


